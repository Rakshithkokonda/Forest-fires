# -*- coding: utf-8 -*-
"""project_forestfires_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LziC7XvsKvgzZF4HjerhiWW1RGJfSM2s
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

from sklearn.feature_selection import RFE

import matplotlib.pyplot as plt

from sklearn.metrics import explained_variance_score
from sklearn.metrics import mean_absolute_error

dataset=pd.read_csv("/content/forestfires.csv")

x2 = dataset.iloc[:,0:10].values
y2 = dataset.iloc[:,10].values

arr=['X','Y','months','days','DMC','DC','ISI','TEMPERATURE','RELATIVE HUMIDITY','WIND']
for i in range(10):
    if(i==2 or i==3):
        continue
    else:
        x1=x2[:,i]
        plt.scatter(x1,y2,color='blue')
        plt.xlabel(arr[i])
        plt.ylabel('AREA AFFECTED IN (HA)')
        plt.title('Support Vector Regression')
        plt.show()

dataset.hist()

dataset1=pd.read_csv("/content/forestfires.csv")

x1=dataset1.iloc[:,2]
y1=dataset1.iloc[:,10].values
x2=dataset1.iloc[:,3]
plt.bar(x1,y1)
plt.xlabel('MONTHS')
plt.ylabel('AREA AFFECTED IN (HA)')

plt.bar(x2,y1)
plt.xlabel('DAYS')
plt.ylabel('AREA AFFECTED IN (HA)')

le = LabelEncoder()

dataset['month']=le.fit_transform(dataset['month'])
dataset['day']=le.fit_transform(dataset['day'])
dataset.isnull().any()

x = dataset.iloc[:,0:10].values
y = dataset.iloc[:,10].values


from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.25,random_state=0)

from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV

scalar = StandardScaler()
model= SVR()

model.fit(x_train, y_train)
y_pred = model.predict(x_test)
score = explained_variance_score(y_test, y_pred)
mae = mean_absolute_error(y_pred, y_test)
msg = " %f (%f)" % ( score, mae)
print(msg)

def rec(m,n,tol):
    if type(m)!='numpy.ndarray':
        m=np.array(m)
    if type(n)!='numpy.ndarray':
        n=np.array(n)
    l=m.size
    percent = 0
    for i in range(l):
        if np.abs(10**m[i]-10**n[i])<=tol:
            percent+=1
    return 100*(percent/l)

tol_max=20
rec_SVR=[]
for i in range(tol_max):
    rec_SVR.append(rec(y_pred,y_test,i))

plt.figure(figsize=(5,5))
plt.title("REC curve for the Support Vector Regressor\n",fontsize=15)
plt.xlabel("Absolute error (tolerance) in prediction ($ha$)")
plt.ylabel("Percentage of correct prediction")
plt.xticks([i*5 for i in range(tol_max+1)])
plt.ylim(-10,100)
plt.yticks([i*20 for i in range(6)])
plt.grid(True)
plt.plot(range(tol_max),rec_SVR)

x_test
y_pred

prediction = model.predict(x_test)
prediction